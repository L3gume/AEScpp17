What the fuck did you just fucking say about me, you little bitch? I’ll have you know I graduated top of my class in the Navy Seals, and I’ve been involved in numerous secret raids on Al-Quaeda, and I have over 300 confirmed kills. I am trained in gorilla warfare and I’m the top sniper in the entire US armed forces. You are nothing to me but just another target. I will wipe you the fuck out with precision the likes of which has never been seen before on this Earth, mark my fucking words. You think you can get away with saying that shit to me over the Internet? Think again, fucker. As we speak I am contacting my secret network of spies across the USA and your IP is being traced right now so you better prepare for the storm, maggot. The storm that wipes out the pathetic little thing you call your life. You’re fucking dead, kid. I can be anywhere, anytime, and I can kill you in over seven hundred ways, and that’s just with my bare hands. Not only am I extensively trained in unarmed combat, but I have access to the entire arsenal of the United States Marine Corps and I will use it to its full extent to wipe your miserable ass off the face of the continent, you little shit. If only you could have known what unholy retribution your little “clever” comment was about to bring down upon you, maybe you would have held your fucking tongue. But you couldn’t, you didn’t, and now you’re paying the price, you goddamn idiot. I will shit fury all over you and you will drown in it. You’re fucking dead, kiddo. What in Davy Jones’ locker did ye just bark at me, ye scurvy bilgerat? I’ll have ye know I be the meanest cutthroat on the seven seas, and I’ve led numerous raids on fishing villages, and raped over 300 wenches. I be trained in hit-and-run pillaging and be the deadliest with a pistol of all the captains on the high seas. Ye be nothing to me but another source o’ swag. I’ll have yer guts for garters and keel haul ye like never been done before, hear me true. You think ye can hide behind your newfangled computing device? Think twice on that, scallywag. As we parley I be contacting my secret network o’ pirates across the sea and yer port is being tracked right now so ye better prepare for the typhoon, weevil. The kind o’ monsoon that’ll wipe ye off the map. You’re sharkbait, fool. I can sail anywhere, in any waters, and can kill ye in o’er seven hundred ways, and that be just with me hook and fist. Not only do I be top o’ the line with a cutlass, but I have an entire pirate fleet at my beck and call and I’ll damned sure use it all to wipe yer arse off o’ the world, ye dog. If only ye had had the foresight to know what devilish wrath your jibe was about to incur, ye might have belayed the comment. But ye couldn’t, ye didn’t, and now ye’ll pay the ultimate toll, you buffoon. I’ll shit fury all over ye and ye’ll drown in the depths o’ it. You’re fish food now, lad.Whenever I get a package of plain M&Ms, I make it my duty to continue the strength and robustness of the candy as a species. To this end, I hold M&M duels. Taking two candies between my thumb and forefinger, I apply pressure, squeezing them together until one of them cracks and splinters. That is the “loser,” and I eat the inferior one immediately. The winner gets to go another round. I have found that, in general, the brown and red M&Ms are tougher, and the newer blue ones are genetically inferior. I have hypothesized that the blue M&Ms as a race cannot survive long in the intense theater of competition that is the modern candy and snack-food world. Occasionally I will get a mutation, a candy that is misshapen, or pointier, or flatter than the rest. Almost invariably this proves to be a weakness, but on very rare occasions it gives the candy extra strength. In this way, the species continues to adapt to its environment. When I reach the end of the pack, I am left with one M&M, the strongest of the herd. Since it would make no sense to eat this one as well, I pack it neatly in an envelope and send it to M&M Mars, A Division of Mars, Inc., Hackettstown, NJ 17840-1503 U.S.A., along with a 3×5 card reading, “Please use this M&M for breeding purposes.” This week they wrote back to thank me, and sent me a coupon for a free 1/2 pound bag of plain M&Ms. I consider this “grant money.” I have set aside the weekend for a grand tournament. From a field of hundreds, we will discover the True Champion. There can be only one. I sexually Identify as an Attack Helicopter. Ever since I was a boy I dreamed of soaring over the oilfields dropping hot sticky loads on disgusting foreigners. People say to me that a person being a helicopter is Impossible and I’m fucking retarded but I don’t care, I’m beautiful. I’m having a plastic surgeon install rotary blades, 30 mm cannons and AMG-114 Hellfire missiles on my body. From now on I want you guys to call me “Apache” and respect my right to kill from above and kill needlessly. If you can’t accept me you’re a heliphobe and need to check your vehicle privilege. Thank you for being so understanding.Hey Faggots, My name is John, and I hate every single one of you. All of you are fat, retarded, no-lifes who spend every second of their day looking at stupid ass pictures. You are everything bad in the world. Honestly, have any of you ever gotten any pussy? I mean, I guess it’s fun making fun of people because of your own insecurities, but you all take to a whole new level. This is even worse than jerking off to pictures on facebook. Don’t be a stranger. Just hit me with your best shot. I’m pretty much perfect. I was captain of the football team, and starter on my basketball team. What sports do you play, other than “jack off to naked drawn Japanese people”? I also get straight A’s, and have a banging hot girlfriend (She just blew me; Shit was SO cash). You are all faggots who should just kill yourselves. Thanks for listening. Pic Related: It’s me and my bitch. DO IT, just DO IT! Don’t let your dreams be dreams. Yesterday, you said tomorrow. So just. DO IT! Make. your dreams. COME TRUE! Just… do it! Some people dream of success, while you’re gonna wake up and work HARD at it! NOTHING IS IMPOSSIBLE!You should get to the point where anyone else would quit, and you’re not gonna stop there. NO! What are you waiting for? … DO IT! Just… DO IT! Yes you can! Just do it! If you’re tired of starting over, stop. giving. up.

( ͡° ͜ʖ ͡°) Every 60 seconds in Africa, a minute passes. Together we can stop this. Please spread the word ( ͡° ͜ʖ ͡°)

 

ヽ༼ຈل͜ຈ༽ﾉ ʀᴀɪsᴇ ᴜʀ ᴅᴏɴɢᴇʀs ヽ༼ຈل͜ຈ༽ﾉ

 

▼ ◄ ▲ ► ▼ ◄ ▲ ► ▼ ◄ ▲ ▼ ◄ ▲ ▼ ▲ ► ▼ ◄ ▲ ► ▼Sorry, I’ve dropped my bag of Doritos™ ▲ ► ▼ ◄ ▲ ► ▼ ◄ ▲ ▼ ◄ ▲ ► ▼ ► ▼ ◄ ▲ ► ▼ ◄ ▲ ►

 

▀█▀ █▬█ █ ▄█▀ █ ▄█▀ ▄█▀ █▬█ █ ▀█▀

 

ヽヽ༼༼ຈຈل͜ل͜ຈຈ༽༽ﾉﾉ TURN OFF THE VIBRATOR ヽヽ༼༼ຈຈل͜ل͜ຈຈ༽༽ﾉﾉ

 

UPLOADING VIRUS.EXE ████████████████] 99%

 

ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ jam ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ jam ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ jam ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ jam ζ༼Ɵ͆ل͜Ɵ͆༽ᶘ

 

ヽ༼ຈل͜ຈ༽ﾉ ༼ ºل͟º ༽ ୧༼ ͡◉ل͜ ͡◉༽୨ (ง ͠° ل͜ °)ง ヽ༼ຈل͜ຈ༽ﾉ ༼ ºل͟º ༽ Join da Party ୧༼ ͡◉ل͜ ͡◉༽୨ (ง ͠° ل͜ °)ง ヽ༼ຈل͜ຈ༽ﾉ ༼ ºل͟º ༽ ୧༼ ͡◉ل͜ ͡◉༽୨ (ง ͠° ل͜ °)ง

 

༼ ºل͟º༼ ºل͟º༼ ºل͟º༼ ºل͟º ༽ºل͟º ༽ºل͟º ༽YOU CAME TO THE WRONG DONGERHOOD༼ ºل͟º༼ ºل͟º༼ ºل͟º༼ ºل͟º ༽ºل͟º ༽ºل͟º ༽

 

(ง ͠° ͟ل͜ ͡°)ง I have been training since before I was born, and today is the day. Today is the day I spam. (ง ͠° ͟ل͜ ͡°)ง

 

ヾ(❛ε❛“)ʃ SPOOKY SCARY SKELETONS SEND SHIVERS DOWN YOUR SPINE SHRIEKING SKULLS WILL SHOCK YOUR SOUL SEAL YOUR DOOM TONIGHT ヾ(❛ε❛“)ʃ

 

ｗｈｅｎ　ｉ　ｆｅｅｌ ( ͡° ͜ʖ ͡°)，　ｍｙ　ｈａｎｄ　ａｕｔｏｍａｔｉｃａｌｌｙ　ｇｏ　ｔｏ　ｔｈｅ　ｄｉｃｋ．　ｉ　ｓｔｒｏｋｅ　ｔｈｅ　ｄｉｃｋ　ａｎｄ　ｆｅｅｌ　 ｉ　ｈａｖｅ　ｓｅｘ　ｗｉｔｈ　ｔｈｅ　( ͡° ͜ʖ ͡°)．　ａｌｌ　ｂｅｃｏｍｉｎｇ ( ͡° ͜ʖ ͡°).

 

(▀̿ ̿Ĺ̯̿̿▀̿ ̿) IM DONG,JAMES DONG (▀̿ ̿Ĺ̯̿̿▀̿ ̿)

 

ヽ( ° ͜ʖ͡°)ﾉ ʀuʙ ᴍʏ ᴅᴏɴɢᴇʀ ヽ( ° ͜ʖ͡°)ﾉ

 

▌▌✈ ▌▌✈ ▌▌✈ ▌▌✈ ▌▌✈ ▌▌Sorry i dropped my bag of 9/11 ▌▌✈ ▌▌✈ ▌▌✈ ▌▌✈ ▌▌✈ ▌▌

 



What the ( ͡° ͜ʖ ͡°) did you just ( ͡° ͜ʖ ͡°) say about me, you little ( ͡° ͜ʖ ͡°)? I’ll have you know I graduated top of my ( ͡° ͜ʖ ͡°) in the ( ͡° ͜ʖ ͡°), and I’ve been involved in numerous secret ( ͡° ͜ʖ ͡°) on ( ͡° ͜ʖ ͡°), and I have over 300 confirmed ( ͡° ͜ʖ ͡°). I am trained in ( ͡° ͜ʖ ͡°) warfare and I’m the top ( ͡° ͜ʖ ͡°) in the entire US armed ( ͡° ͜ʖ ͡°). You are nothing to me but just another ( ͡° ͜ʖ ͡°). I will wipe you the ( ͡° ͜ʖ ͡°) out with precision the ( ͡° ͜ʖ ͡°) of which has never been seen before on this ( ͡° ͜ʖ ͡°), mark my ( ͡° ͜ʖ ͡°) words. ( ͡° ͜ʖ ͡°) think ( ͡° ͜ʖ ͡°) can get away with saying that ( ͡° ͜ʖ ͡°) to me over the ( ͡° ͜ʖ ͡°)? Think again, ( ͡° ͜ʖ ͡°). As we speak I am contacting my secret network of ( ͡° ͜ʖ ͡°) across the ( ͡° ͜ʖ ͡°) and your ( ͡° ͜ʖ ͡°) is being ( ͡° ͜ʖ ͡°) right now so you better ( ͡° ͜ʖ ͡°) for the ( ͡° ͜ʖ ͡°), ( ͡° ͜ʖ ͡°). The ( ͡° ͜ʖ ͡°) that wipes out the pathetic little thing you call ( ͡° ͜ʖ ͡°). You’re ( ͡° ͜ʖ ͡°) dead, ( ͡° ͜ʖ ͡°). I can be ( ͡° ͜ʖ ͡°), anytime, and I can ( ͡° ͜ʖ ͡°) you in over seven hundred ( ͡° ͜ʖ ͡°), and that’s just with my bare ( ͡° ͜ʖ ͡°). Not only am I extensively trained in ( ͡° ͜ʖ ͡°) combat, but I have access to the entire ( ͡° ͜ʖ ͡°) of the United States ( ͡° ͜ʖ ͡°) and I will use it to its full extent to wipe your miserable ( ͡° ͜ʖ ͡°) off the face of the ( ͡° ͜ʖ ͡°), you little ( ͡° ͜ʖ ͡°). If only you could have known what unholy retribution your little ( ͡° ͜ʖ ͡°) comment was about to bring down upon ( ͡° ͜ʖ ͡°), maybe you would have held your ( ͡° ͜ʖ ͡°) ( ͡° ͜ʖ ͡°). But you couldn’t, you didn’t, and now you’re paying the price, you ( ͡° ͜ʖ ͡°). I will ( ͡° ͜ʖ ͡°) fury all over ( ͡° ͜ʖ ͡°) and ( ͡° ͜ʖ ͡°) will ( ͡° ͜ʖ ͡°) in it. You’re ( ͡° ͜ʖ ͡°) dead, ( ͡° ͜ʖ ͡°).

 

ヽ༼ຈل͜ຈ༽ﾉ NOW WE RIOT ヽ༼ຈل͜ຈ༽ﾉ

 

( ͡° ͜ʖ ͡°)╯╲___卐卐卐卐 Don’t mind me just taking the mods out for a walk

 

卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐

Repost this windmill of friendship if you think

 

Europe should embrace racial diversity

卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐 卐

 

Darude- status

☐ Not Sandstorm

☑ Sandstorm

 

▬▬ι═══════ﺤ As I ʜᴏʟᴅ ᴛʜᴇ sᴀᴍᴜʀᴀɪ sᴡᴏʀᴅ ᴛᴏ ᴍʏ sᴛᴏᴍᴀᴄʜ ᴀs I ᴡᴀs ᴀʙᴏᴜᴛ ᴛᴏ ᴄᴏᴍᴍɪᴛ sᴜᴅᴏᴋᴜ, I ᴡᴀᴛᴄʜ Kʀɪᴘᴘ ᴘʟᴀʏ Cᴀsᴜᴀʟsᴛᴏɴᴇ… I ʀᴇᴍᴇᴍʙᴇʀ ᴀ ᴛɪᴍᴇ ᴡʜᴇʀᴇ Kʀɪᴘ ᴡᴀs Nᴏʟɪғᴇ… ɴᴏᴡ I ᴀᴍ Nᴏʟɪғᴇ…ɢᴏᴏᴅ ʙʏᴇ ᴋʀɪᴘᴘ ▬▬ι═══════ﺤ

 

° ☾ ☆ ¸. ¸ 　★　 :.　 . • ○ ° ★　 .　 　.　.　　¸ .　　 ° 　¸. * ● ¸ .　…somewhere　　　° ☾ ° 　¸. ● ¸ .　　★　° :.　 . • ° 　 .　 *　:.　.in a parallel universe ● ¸ 　　　　° ☾ °☆ 　. * ¸.　　　★　★ ° . .　　　　.　☾ °☆ 　. * ● Kripparrian isn’t a casual…° ☾　★ °● ¸ .　　　★　° :.　 . • ○ ° ★

 

༼ ▀̿Ĺ̯▀̿ ̿ ༽Hello, my name is Juan Pastoroni, CEO of Copy Pasta Industries. I’d like to let you know that we’ve just gained copyrights on a lot of copy pastas seen in this chat. If you are using them right now, please refrain from doing so, or risk being fined under copyright infringement. Thank you, and don’t be funny and copy and paste this. This is business, kid.༼ ▀̿Ĺ̯▀̿ ̿ ༽

 

↓ ᶠᵘᶜᵏ ᵗʰᶦˢ ᵍᵘʸ↓ ↑ ᶠᵘᶜᵏ ʸᵒᵘ ᵗᵒᵒ ↑

 

☐ Not REKT ☑ REKT ☑ REKTangle ☑ SHREKT ☑ REKT-it Ralph ☑ Total REKTall ☑ The Lord of the REKT ☑ The Usual SusREKTs ☑ North by NorthREKT ☑ REKT to the Future ☑ Once Upon a Time in the REKT ☑ The Good, the Bad, and the REKT ☑ LawREKT of Arabia ☑ Tyrannosaurus REKT ☑ eREKTile dysfunction ☑ eREKTion

 

t༼ ຈل͜ຈ༽ށ HERE TAKE IT!

 

̿̿ ̿̿ ̿̿ ̿’̿’\̵͇̿̿\з=( ͡° ͜ʖ ͡°)=ε/̵͇̿̿/’̿’̿ ̿ ̿̿ ̿̿ ̿̿ TIME TO DUELL …. ̿ ̿̿’̿’\̵͇̿̿\=(•̪○)=/̵͇̿̿/’̿̿ ̿ ̿ ̿

 

 
Yᵒᵘ Oᶰˡʸ Lᶤᵛᵉ Oᶰᶜᵉ

 

[̲̅$̲̅(̲̅ ͡° ͜ʖ ͡°̲̅)̲̅$̲̅] do you have change for a donger bill

 

༼ ºل͟º༼ ºل͟º( ͡° ͡ ͜ ͡ʖ ͡ °)ºل͟º ༽ºل͟º ༽ 5 MEN, 1 DREAM, 9 EYEBROWS ༼ ºل͟º༼ ºل͟º( ͡° ͡ ͜ ͡ʖ ͡ °)ºل͟º ༽ºل͟º ༽

 

work it ᕙ༼ຈل͜ຈ༽ᕗ harder

make it (ง •̀_•́)ง better

do it ᕦ༼ຈل͜ຈ༽ᕤ faster

raise ur ヽ༼ຈل͜ຈ༽ﾉ donger
Sharing
facebooktwittergoogle_plusredditpinteresttumblr
Toucan Bird

░░░░░░░░▄▄▄▀▀▀▄▄███▄
░░░░░▄▀▀░░░░░░░▐░▀██▌
░░░▄▀░░░░▄▄███░▌▀▀░▀█
░░▄█░░▄▀▀▒▒▒▒▒▄▐░░░░█▌
░▐█▀▄▀▄▄▄▄▀▀▀▀▌░░░░░▐█▄
░▌▄▄▀▀░░░░░░░░▌░░░░▄███████▄
░░░░░░░░░░░░░▐░░░░▐███████████▄
░░░░░le░░░░░░░▐░░░░▐█████████████▄
░░░░toucan░░░░░░▀▄░░░▐██████████████▄
░░░░░░has░░░░░░░░▀▄▄████████████████▄
░░░░░arrived░░░░░░░░░░░░█▀██████

 

 

Homer

▓▓▓▓
▒▒▒▓▓
▒▒▒▒▒▓
▒▒▒▒▒▒▓
▒▒▒▒▒▒▓
▒▒▒▒▒▒▒▓
▒▒▒▒▒▒▒▓▓▓
▒▓▓▓▓▓▓░░░▓
▒▓░░░░▓░░░░▓
▓░░░░░░▓░▓░▓
▓░░░░░░▓░░░▓
▓░░▓░░░▓▓▓▓
▒▓░░░░▓▒▒▒▒▓
▒▒▓▓▓▓▒▒▒▒▒▓
▒▒▒▒▒▒▒▒▓▓▓▓
▒▒▒▒▒▓▓▓▒▒▒▒▓
▒▒▒▒▓▒▒▒▒▒▒▒▒▓
▒▒▒▓▒▒▒▒▒▒▒▒▒▓
▒▒▓▒▒▒▒▒▒▒▒▒▒▒▓
▒▓▒▓▒▒▒▒▒▒▒▒▒▓
▒▓▒▓▓▓▓▓▓▓▓▓▓
▒▓▒▒▒▒▒▒▒▓
▒▒▓▒▒▒▒▒▓

 

 

 

GG Son

░░░░░░░░░░░░░░░░░░░░░░ ░░░░╔════╗░░╔════╗░░░░ ░░░░║╔═══╝░░║╔═══╝░░░░ ░░░░║║╔══╗░░║║╔══╗░░░░ ░░░░║║╚═╗║░░║║╚═╗║░░░░ ░░░░║╚══╝║░░║╚══╝║░░░░ ░░░░╚════╝░░╚════╝░░░░ ░░░░░░░░░░░░░░░░░░░░░░ ░╔════╗░╔═══╗░╔══╗░╔╗░ ░║╔═══╝░║╔═╗║░║╔╗╚╗║║░ ░║╚═══╗░║║░║║░║║╚╗╚╝║░ ░╚═══╗║░║║░║║░║║░╚╗░║░ ░╔═══╝║░║╚═╝║░║║░░╚╗║░ ░╚════╝░╚═══╝░╚╝░░░╚╝░

 

 

Trollface

░░░░░▄▄▄▄▀▀▀▀▀▀▀▀▄▄▄▄▄▄░░░░░░░
░░░░░█░░░░▒▒▒▒▒▒▒▒▒▒▒▒░░▀▀▄░░░░
░░░░█░░░▒▒▒▒▒▒░░░░░░░░▒▒▒░░█░░░
░░░█░░░░░░▄██▀▄▄░░░░░▄▄▄░░░░█░░
░▄▀▒▄▄▄▒░█▀▀▀▀▄▄█░░░██▄▄█░░░░█░
█░▒█▒▄░▀▄▄▄▀░░░░░░░░█░░░▒▒▒▒▒░█
█░▒█░█▀▄▄░░░░░█▀░░░░▀▄░░▄▀▀▀▄▒█
░█░▀▄░█▄░█▀▄▄░▀░▀▀░▄▄▀░░░░█░░█░
░░█░░░▀▄▀█▄▄░█▀▀▀▄▄▄▄▀▀█▀██░█░░
░░░█░░░░██░░▀█▄▄▄█▄▄█▄████░█░░░
░░░░█░░░░▀▀▄░█░░░█░█▀██████░█░░
░░░░░▀▄░░░░░▀▀▄▄▄█▄█▄█▄█▄▀░░█░░
░░░░░░░▀▄▄░▒▒▒▒░░░░░░░░░░▒░░░█░
░░░░░░░░░░▀▀▄▄░▒▒▒▒▒▒▒▒▒▒░░░░█░
░░░░░░░░░░░░░░▀▄▄▄▄▄░░░░░░░░█░░

 

 

Weird Face

┈╭━━━━━━━━━━━╮┈
┈┃╭━━━╮┊╭━━━╮┃┈
╭┫┃┈▇┈┃┊┃┈▇┈┃┣╮
┃┃╰━━━╯┊╰━━━╯┃┃
╰┫╭━╮╰━━━╯╭━╮┣╯
┈┃┃┣┳┳┳┳┳┳┳┫┃┃┈
┈┃┃╰┻┻┻┻┻┻┻╯┃┃┈
┈╰━━━━━━━━━━━╯┈

 

 

FrankerZ Twitch Ascii
░░░░░░░░░░░░░░░░░░░░░░
░░░░░░░▄░░▄▄▄▀▀▀█▀▄▄▄░░▄
░░░▄▄▓▓▓▓▒▒▒▒░░░░▒▒▒▀▓▓▓▓▄▄
▄▓▓▓▓▓▓▓▒▒▒▒▒░░░░▒▒▒▒▒▓▓▓▓▓▓▓▄
▓▓▓▓▓▓▓▓▒░██▒▒░░░▒▒▒▄▄▒▓▓▓▓▓▓▓▓
▀▓▓▓▓▓▓░▒▒▒▒▒░░░░▒▒▒▀▀▒▀░▓▓▓▓▓▓
░▀▓▓▓▓▓░▒▒▒▒░░░░░░░░▒▒░░▓▓▓▓▓▀
░░░▀▀▀░░░▒▒▒░░▄▄▄▄▒░▒░░░░▀▀▀
░░░░░░░░░░▒▒░░████▀░▒
░░░░░░░░░░░░▒▒░░░░▒

 

Bit Salty m8

▒▒▒▒▒▒▒▒▒▒▒▒▒▒▄▄██████▄
▒▒▒▒▒▒▒▒▒▒▄▄████████████▄
▒▒▒▒▒▒▄▄██████████████████
▒▒▒▄████▀▀▀██▀██▌███▀▀▀████
▒▒▐▀████▌▀██▌▀▐█▌████▌█████▌
▒▒█▒▒▀██▀▀▐█▐█▌█▌▀▀██▌██████
▒▒█▒▒▒▒████████████████████▌
▒▒▒▌▒▒▒▒█████░░░░░░░██████▀
▒▒▒▀▄▓▓▓▒███░░░░░░█████▀▀
▒▒▒▒▀░▓▓▒▐█████████▀▀▒
▒▒▒▒▒░░▒▒▐█████▀▀▒▒▒▒▒▒
▒▒░░░░░▀▀▀▀▀▀▒▒▒▒▒▒▒▒▒
▒▒▒░░░░░░░░▒▒

 

Do you even lift

／ﾌﾌ 　　　　　　 ム｀ヽ
/ do you even dong? ） ヽ
/ ｜　　( ° ͜ʖ °）ノ （ゝ.,ノ
/　ﾉ⌒7⌒ヽーく　 ＼　／
丶＿ ノ ｡　　 ノ､　｡|/
`ヽ `ー-人`ーﾉ

Smiley

░░░░░░░░░░▐▌░░░░░░░░░░░▄
▄▄░░░░░░░▄▄▄▄░░░░▌▄▄▄▄▄░░░░░▐▌
▒▀█▌░░░▐▀▀▄▄▐▌▒░░▒▀▒▄▒█▄░░░░▐▌
░░▀█▒░░▓░░█▐█▌▌░░▒░▐▌█▌▐▌░░▐▌
░░░░░░▓▀░░▒▐▀▄▀▀▀▀▒▒▀▀░░▀▌▒▀░░
░░░░░░▌░░░░░░▀▄▄▄▄▀░░░░░░▌░░░░
░░░░░▄▌░░░░░░░░░░░░░░░░░░▒░░░░
 
	Doge

░░░▄░░░░░░░░░░░░░░▄ ░░░░░░░░▌▒█░░░░░░░░░░░▄▀▒▌ ░░░░░░░░▌▒▒█░░░░░░░░▄▀▒▒▒▐ ░░░░░░░▐▄▀▒▒▀▀▀▀▄▄▄▀▒▒▒▒▒▐ ░░░░░▄▄▀▒░▒▒▒▒▒▒▒▒▒█▒▒▄█▒▐ ░░░▄▀▒▒▒░░░▒▒▒░░░▒▒▒▀██▀▒▌ ░░▐▒▒▒▄▄▒▒▒▒░░░▒▒▒▒▒▒▒▀▄▒▒▌ ░░▌░░▌█▀▒▒▒▒▒▄▀█▄▒▒▒▒▒▒▒█▒▐ ░▐░░░▒▒▒▒▒▒▒▒▌██▀▒▒░░░▒▒▒▀▄▌ ░▌░▒▄██▄▒▒▒▒▒▒▒▒▒░░░░░░▒▒▒▒▌ ▀▒▀▐▄█▄█▌▄░▀▒▒░░░░░░░░░░▒▒▒

 

 

Penis

░░▄▄░░░░▄░░░░▄░░░ ░░░░░░█▄░░░█░░█▀░░░░ ░░░░░░░▀█▄░▀░░░░░░░░ ░░░░▄░░░▄▄███▄░░░▄▄░ ░░░▀▀░░▄█░░█░█▄░░░▀█ ░░░░░░░█░░░░░░█░░░░░ ░░░░░░░████████░░░░░ ░░░░░░░█▄▄░░░░█░░░░░ ░░░░░░░█░░░░▀▀█░░░░░ ░░░░░░░█▀▀▀░▄▄█░░░░░ ░░░░░░░█░░░░░░█▄░░░░ ▄▄▄▄██▀▀░░░░░░░▀██░░ ░▄█▀░▀░░░░▄░░░░░░█▄▄ ▀▀█▄▄▄░░░▄██░░░░▄█░░ ░█▀█▄▄▄▄█▀░██▄▄██▄▄░ ░░░░▀░░░▀░░░▀░░░░░░░

 

 

Shit

░░░░░░░░░░░█▀▀░░█░░░░░░ ░░░░░░▄▀▀▀▀░░░░░█▄▄░░░░ ░░░░░░█░█░░░░░░░░░░▐░░░ ░░░░░░▐▐░░░░░░░░░▄░▐░░░ ░░░░░░█░░░░░░░░▄▀▀░▐░░░ ░░░░▄▀░░░░░░░░▐░▄▄▀░░░░ ░░▄▀░░░▐░░░░░█▄▀░▐░░░░░ ░░█░░░▐░░░░░░░░▄░█░░░░░ ░░░█▄░░▀▄░░░░▄▀▐░█░░░░░ ░░░█▐▀▀▀░▀▀▀▀░░▐░█░░░░░ ░░▐█▐▄░░▀░░░░░░▐░█▄▄░░░ ░░░▀▀░▄▄▄▄▄░░▐▄▄▄▀░░░ ░░░░░░░░░░░░░░░░░░░░░░░

 

 

Crazy Face

░░░░░░▄▄▄▄▄▓▓▓▄▄▄░░░░░ ░░░░▄▄▓▓▓▓▓▓▓▓▓▓▓▓▓▄░░░ ░░▄▄▓▓▓▓▓▓▓▓▓▓▓▓▓▓▓▀█▄░ ░▓▓▌▓▓▓░░▒▒▒▒▀(◐)▒▒▒▒▒█▓ ░▓▓▌▓▓░▒▒▓(◐)▓░░░▒▓▓(◐)█▓ ▓▓▌▓▓█▄█▀▄▄░▀░▀▄▄▀░░█░█ ▓▓▌▓▓▀▄█▄█░█▀▄▄▄▄▄▀██░█ ░▓▓▌▓▓░█░███▄█▄█▄███░░█ ░▓▓▌▓▓░█░███████████░░█ ░▓▓▌▓▓░█░███████████░░█ ░▓▓▌▓▓░█░███████████░░█ ░▓▓▌▓▓░▀▀█░█▀█▀█▀███░█ ░░▓▓▌▓▓░░░▀▀▄█▄█▄█▄▀░█ ░░▓▓▌▓▓▓▓▀▀▄▄▄▄▄▄▄▄▄▄▀

 

 

Sanic

░░░░░░░░▀▀▀██████▄▄▄ ░░░░░░▄▄▄▄▄░░█████████▄ ░░░░░▀▀▀▀█████▌░▀▐▄░▀▐█ ░░░▀▀█████▄▄░▀██████▄██ ░░░▀▄▄▄▄▄░░▀▀█▄▀█════█▀ ░░░░░░░░▀▀▀▄░░▀▀███░▀░░░░░░▄▄ ░░░░░▄███▀▀██▄████████▄░▄▀▀▀██▌ ░░░██▀▄▄▄██▀▄███▀░▀▀████░░░░░▀█▄ ▄▀▀▀▄██▄▀▀▌████▒▒▒▒▒▒███░░░░▌▄▄▀ ▌░░░░▐▀████▐███▒▒▒▒▒▐██▌ ▀▄░░▄▀░░░▀▀████▒▒▒▒▄██▀ ░░▀▀░░░░░░▀▀█████████▀ ░░░░░░░░

 

 

Mario

▒▒▒▒▒▒▒▒▒▄▄▄▄▒▄▄▄▒▒▒ ▒▒▒▒▒▒▄▀▀▓▓▓▀█░░░█▒▒ ▒▒▒▒▄▀▓▓▄██████▄░█▒▒ ▒▒▒▄█▄█▀░░▄░▄░█▀▀▄▒▒ ▒▒▄▀░██▄░░▀░▀░▀▄▓█▒▒ ▒▒▀▄░░▀░▄█▄▄░░▄█▄▀▒▒ ▒▒▒▒▀█▄▄░░▀▀▀█▀▓█▒▒▒ ▒▒▒▄▀▓▓▓▀██▀▀█▄▀▒▒▒▒ ▒▒█▓▓▄▀▀▀▄█▄▓▓▀█▒▒▒▒ ▒▒▀▄█░░░░░█▀▀▄▄▀█▒▒▒ ▒▒▒▄▀▀▄▄▄██▄▄█▀▓▓█▒▒ ▒▒█▀▓█████████▓▓▓█▒▒ ▒▒█▓▓██▀▀▀▒▒▒▀▄▄█▀▒▒ ▒▒▒▀▀▒▒▒▒▒▒▒▒▒▒▒▒▒▒▒

 

 

Twitch Cat

░░░░░░░░░░░░░░░░░░░░ █▀▄▄░░░░░░░░░░░░▄▄▀█ █░▒▓█▄▄▀▀▀█▀▄▄▄█▓▒░█ ░█░▒▓▓▀▓▓▒▓▒▒▀▓▓▒░█░ ▄▀▄░▒▓▓▒▒▓▒▓▒▓▓▒░▄▀░ █▓█▒▒▓▒▓▓▓░░░░░▒▒█▄░ █▓▓▓▓▓▒▓▒░░░░░░░░▓█░ ▓▓▓▓▓▒░░░░░░░░░░░░█░ ▓▓▓▓░░░░▄▄▄▄░░░▄█▄▀░ ░▀▄▓░░▒▀▓▓▒▒░░█▓▒▒░░ ▀▄░░░░░░░░░░░░▀▄▒▒█░ ░▀░▀░░░░░▒▒▀▄▄▒▀▒▒█░ ░░▀░░░░░░▒▄▄▒▄▄▄▒▒█░ ░░░▀▄▄▒▒░░░░▀▀▒▀██▄▄ ░░░░░▀█▄▒▒░░░░▒▄▀░░▀ ░░░░░░░░▀▀█▄▄▄▄▀░░░

 

FU

…………………/´¯¯/)
……………….,/¯…/
………………./…./
……………/´¯/’..’/´¯¯`·¸
………../’/…/…./……/¨¯\
……….(‘(….´…´… ¯~/’..’)
………..\…………..’…../
…………\….\………._.·´
………….\…………..(
…………..\…………..\

 

 

Tank

░░░░░░███████ ]▄▄▄▄▄▄▄▄▃
▂▄▅█████████▅▄▃▂
I███████████████████].
◥⊙▲⊙▲⊙▲⊙▲⊙▲⊙▲⊙◤

 

 
Sharing
4
1. 
Introduction 
This  standard  specifies  the  
Rijndael
  algorithm  ([3]  and  [4]),  a  symmetric  block  cipher  that  can  
process  
data  blocks
  of  
128  bits
,  using  cipher
  keys  
with  lengths  of  
128
,  
192
,  and  
256  bits
. 
Rijndael  was  designed  to  handle  additional  block  sizes  and  key  lengths,  however  they  are  not  
adopted in this standard. 
Throughout  the  remainder  of  this  standard,  the  algorithm  specified  herein  will  be  referred  to  as  
“the AES algorithm.”  The algorithm may be used with the three different key lengths indicated 
above, and therefore these different “flavors” may be referred to as “AES-128”, “AES-192”, and 
“AES-256”. 
This specification includes the following sections: 
2.
Definitions of terms, acronyms, and algorithm parameters, symbols, and functions; 
3.
Notation and conventions used in the algorithm specification, including the ordering and 
numbering of bits, bytes, and words; 
4.
Mathematical properties that are useful in understanding the algorithm; 
5.
Algorithm specification, covering the key expansion, encryption, and decryption routines; 
6.
Implementation  issues,  such  as  key  length  support,  keying  restrictions,  and  additional  
block/key/round sizes. 
The standard concludes with several appendices that include step-by-step examples for Key 
Expansion and the Cipher, example vectors for the Cipher and Inverse Cipher, and a list of 
references. 
2. 
Definitions 
2.1 
Glossary of Terms and Acronyms 
The following definitions are used throughout this standard: 
AES 
Advanced Encryption Standard 
Affine 
A transformation consisting of multiplication by a matrix followed by 
Transformation 
the addition of a vector.
Array 
An enumerated collection of identical entities (e.g., an array of bytes).
Bit 
A binary digit having a value of 0 or 1.
Block 
Sequence  of  binary  bits  that  comprise  the  input,  output,  State,  and
Round Key. The length of a sequence is the number of bits it contains. 
Blocks are also interpreted as arrays of bytes. 
Byte 
A  group  of  eight  bits  that  is  treated  either  as  a  single  entity  or  as  an  
array of 8 individual bits. 
5
Cipher 
Series of transformations that converts plaintext to ciphertext using the 
Cipher Key. 
Cipher Key 
Secret, cryptographic key that is used by the Key Expansion routine to 
generate a set of Round Keys; can be pictured as a rectangular array of 
bytes, having four rows and 
Nk
 columns. 
Ciphertext 
Data output from the Cipher or input to the Inverse Cipher. 
Inverse Cipher 
Series of transformations that converts ciphertext to plaintext using the 
Cipher Key. 
Key Expansion 
Routine used to generate a series of Round Keys from the Cipher Key. 
Plaintext 
Data input to the Cipher or output from the Inverse Cipher. 
Rijndael 
Cryptographic   algorithm   specified   in   this   Advanced   Encryption   
Standard (AES). 
Round Key 
Round  keys  are  values  derived  from  the  Cipher  Key  using  the  Key  
Expansion  routine;  they  are  applied  to  the  State  in  the  Cipher  and  
Inverse Cipher. 
State 
Intermediate  Cipher  result  that  can  be  pictured  as  a  rectangular  array  
of bytes, having four rows and 
Nb
 columns. 
S-box 
Non-linear   substitution   table   used   in   several   byte   substitution   
transformations  and  in  the  Key  Expansion  routine  to  perform  a  one-
for-one substitution of a byte value. 
Word 
A group of 32 bits that is treated either as a single entity or as an array 
of 4 bytes. 
2.2 
Algorithm Parameters, Symbols, and Functions 
The following algorithm parameters, symbols, and functions are used throughout this standard: 
AddRoundKey()
Transformation in the Cipher and Inverse Cipher in which a Round 
Key is added to the State using an XOR operation.  The length of a 
Round Key equals the size of the State (i.e., for 
Nb
 = 4, the Round 
Key length equals 128 bits/16 bytes). 
InvMixColumns()
Transformation   in   the   Inverse   Cipher   that   is   the   inverse   of   
MixColumns()
. 
InvShiftRows() 
Transformation   in   the   Inverse   Cipher   that   is   the   inverse   of   
ShiftRows()
. 
InvSubBytes()
Transformation   in   the   Inverse   Cipher   that   is   the   inverse   of   
SubBytes()
. 
K
Cipher Key. 
6
MixColumns()
Transformation  in  the  Cipher  that  takes  all  of  the  columns  of  the  
State  and  mixes  their  data  (independently  of  one  another)  to  
produce new columns. 
Nb
Number  of  columns  (32-bit  words)  comprising  the  State.  For  this  
standard, 
Nb
 = 4. (Also see Sec. 6.3.) 
Nk
Number  of  32-bit  words  comprising  the  Cipher  Key.  For  this  
standard, 
Nk
 = 4, 6, or 8. (Also see Sec. 6.3.) 
Nr
Number  of  rounds,  which  is  a  function  of  
Nk 
and  
Nb 
(which  is  
fixed). For this standard, 
Nr
 = 10, 12, or 14. (Also see Sec. 6.3.) 
Rcon[]
The round constant word array. 
RotWord()
Function used in the Key Expansion routine that takes a four-byte 
word and performs a cyclic permutation. 
ShiftRows()
Transformation in the Cipher that processes the State by cyclically 
shifting the last three rows of the State by different offsets. 
SubBytes()
Transformation in the Cipher that processes the State using a non­
linear  byte  substitution  table  (S-box)  that  operates  on  each  of  the  
State bytes independently. 
SubWord()
Function used in the Key Expansion routine that takes a four-byte 
input  word  and  applies  an  S-box  to  each  of  the  four  bytes  to  
produce an output word. 
XOR
Exclusive-OR operation. 
 ̄
Exclusive-OR operation. 
 ̃
Multiplication  of  two  polynomials  (each  with  degree  <  4)  modulo  
x 
4
 + 1. 
•
Finite field multiplication. 
3. 
Notation and Conventions 
3.1 
Inputs and Outputs 
The 
input
 and 
output
 for the AES algorithm each consist of 
sequences of 128 bits
 (digits with 
values  of  0  or  1).   These  sequences  will  sometimes  be  referred  to  as  
blocks
  and  the  number  of  
bits they contain will be referred to as their length. The 
Cipher Key
 for the AES algorithm is a 
sequence of 128, 192 or 256 bits
.  Other input, output and Cipher Key lengths are not permitted 
by this standard. 
The bits within such sequences will be numbered starting at zero and ending at one less than the 
sequence length (block length or key length). The number 
i
 attached to a bit is known as its index 
and  will  be  in  one  of  the  ranges  0  
£ 
i
 < 128,  0  
£ 
i
 < 192  or  0  
£ 
i
 < 256  depending  on  the  block  
length and key length (specified above). 
7
3.2 
Bytes 
The basic unit for processing in the AES algorithm is a 
byte, 
a sequence of eight bits treated as a 
single entity.  The input, output and Cipher Key bit sequences described in Sec. 3.1 are processed 
as  arrays  of  bytes  that  are  formed  by  dividing  these  sequences  into  groups  of  eight  contiguous  
bits to form arrays of bytes (see Sec. 3.3).  For an input, output or Cipher Key denoted by 
a
, the 
bytes in the resulting array will be referenced using one of the two forms, 
a
n
 or 
a
[
n
], where 
n
 will 
be in one of the following ranges: 
Key length = 128 bits, 
0 
£ 
n
 < 16; 
Block length = 128 bits, 
0 
£ 
n
 < 16; 
Key length = 192 bits, 
0 
£ 
n
 < 24; 
Key length = 256 bits, 
0 
£ 
n
 < 32. 
All byte values in the AES algorithm will be presented as the concatenation of its individual bit 
values  (0  or  1)  between  braces  in  the  order  {
b
7
,  
b
6
,  
b
5
,  
b
4
,  
b
3
,  
b
2
,  
b
1
,  
b
0
}.    These  bytes  are  
interpreted as finite field elements using a polynomial representation: 
7 
7
6
5
4
3
2 
i
b  x 
+ 
b  x 
+ 
b  x 
+ 
b  x 
+ 
b x 
+ 
b  x 
+ 
b x 
+ 
b 
=
�
b
i 
x 
. 
(3.1)
7 
6 
5
4 
3
2
1
0
i
=
0
For example, {
01100011
} identifies the specific finite field element 
x
6 
+ 
x
5 
+ 
x 
+
1 . 
It is also convenient to denote byte values using hexadecimal notation with each of two groups of 
four bits being denoted by a single character as in Fig. 1. 
Bit Pattern 
Character 
0000 
0 
0001 
1 
0010 
2 
0011 
3 
Bit Pattern 
Character 
0100 
4 
0101 
5 
0110 
6 
0111 
7 
Bit Pattern 
Character 
1000 
8 
1001 
9 
1010 
a 
1011 
b 
Bit Pattern 
Character 
1100 
c 
1101 
d 
1110 
e 
1111 
f 
Figure 1.  Hexadecimal representation of bit patterns. 
Hence the element {
01100011
} can be represented as {
63
}, where the character denoting the 
four-bit group containing the higher numbered bits is again to the left. 
Some finite field operations involve one additional bit (
b
8
) to the left of an 8-bit byte. Where this 
extra bit is present, it will appear as ‘{01}’ immediately preceding the 8-bit byte; for example
, a 
9-bit sequence will be presented as {01}{
1b
}. 
3.3 
Arrays of Bytes 
Arrays of bytes will be represented in the following form: 
a  a a 
...
a
0
1
2 
15 
The bytes and the bit ordering within bytes are derived from the 128-bit input sequence 
input
0
 input
1
 input
2
 ... input
126
 input
127 
as follows: 
8
a
0
 = {
input
0
, 
input
1
, ..., 
input
7
}; 
a
1
 = {
input
8
, 
input
9
, ..., 
input
15
}; 
M 
a
15
 = {
input
120
, 
input
121
, ..., 
input
127
}. 
The  pattern  can  be  extended  to  longer  sequences  (i.e.,  for  192-  and  256-bit  keys),  so  that,  in  
general, 
a
n
 = {
input
8
n
, 
input
8
n+
1
, ..., 
input
8
n
+7
}. 
(3.2) 
Taking Sections 3.2 and 3.3 together, Fig. 2 shows how bits within each byte are numbered. 
Input bit sequence 
0 
1 
2 
3 
4 
5 
6 
7 
8 
9 
10 
11 
12 
13 
14 
15 
16 
17 
18 
19 
20 
21 
22 
23 
... 
Byte number 
0 
1 
2 
... 
Bit numbers in byte 
7 
6 
5 
4 
3 
2 
1 
0 
7 
6 
5 
4 
3 
2 
1 
0 
7 
6 
5 
4 
3 
2 
1 
0 
... 
Figure 2. 
Indices for Bytes and Bits. 
3.4 
The State 
Internally,  the  AES  algorithm’s  operations  are  performed  on  a  two-dimensional  array  of  bytes  
called the 
State
.  The State consists of four rows of bytes, each containing 
Nb
 bytes, where 
Nb
 is 
the block length divided by 32.  In the State array denoted by the symbol 
s
, each individual byte 
has  two  indices,  with  its  row  number  
r
  in  the  range  0  
£ 
r
 < 4  and  its  column  number  
c
  in  the  
range  0  
£ 
c
 < 
Nb
.   This  allows  an  individual  byte  of  the  State  to  be  referred  to  as  either  
s
r
,
c
  or  
s
[
r
,
c
].  For this standard, 
Nb
=4, i.e., 0 
£ 
c
 < 4 (also see Sec. 6.3). 
At the start of the Cipher and Inverse Cipher described in Sec. 5, the input – the array of bytes 
in
0
,  
in
1
,  ...  
in
15
  –  is  copied  into  the  State  array  as  illustrated  in  Fig.  3.   The  Cipher  or  Inverse  
Cipher operations are then conducted on this State array, after which its final value is copied to 
the output – the array of bytes 
out
0
, 
out
1
, ... 
out
15
. 
input bytes 
State array 
output bytes 
in
0 
in
4 
in
8 
in
12 
in
1 
in
5 
in
9 
in
1
3 
in
2 
in
6 
in
10 
in
14 
in
3 
in
7 
in
11 
in
15 
s
0,0 
s
0,1 
s
0,2 
s
0,3 
s
1,0 
s
1,1 
s
1,2 
s
1,3 
s
2,0 
s
2,1 
s
2,2 
s
2,3 
s
3,0 
s
3,1 
s
3,2 
s
3,3 
out
0 
out
4 
out
8 
out
12 
out
1 
out
5 
out
9 
out
13 
out
2 
out
6 
out
10 
out
14 
out
3 
out
7 
out
11 
out
15 
�
�
Figure 3.  State array input and output. 
Hence, at the beginning of the Cipher or Inverse Cipher, the input array, 
in
, is copied to the State 
array according to the scheme: 
s
[
r
, 
c
] = 
in
[
r + 
4
c
] 
for 0 
£ 
r
 < 4  and  0 
£ 
c
 < 
Nb
, 
(3.3) 
9
and  at  the  end  of  the  Cipher  and  Inverse  Cipher,  the  State  is  copied  to  the  output  array  
out
  as  
follows: 
out
[
r
 + 4
c
] = 
s
[
r
, 
c
] 
for 0 
£ 
r
 < 4  and  0 
£ 
c
 < 
Nb
. 
(3.4) 
3.5 
The State as an Array of Columns 
The  four  bytes  in  each  column  of  the  State  array  form  32-bit  
words
,  where  the  row  number  
r 
provides  an  index  for  the  four  bytes  within  each  word.  The  state  can  hence  be  interpreted  as  a  
one-dimensional array of 32 bit words (columns), 
w
0
...
w
3
, where the column number 
c
 provides 
an index into this array.  Hence, for the example in Fig. 3, the State can be considered as an array 
of four words, as follows: 
w
0
 = 
s
0,0 
s
1,0 
s
2,0 
s
3,0 
w
2
 = 
s
0,2 
s
1,2 
s
2,2 
s
3,2 
w
1
 = 
s
0,1 
s
1,1 
s
2,1 
s
3,1 
w
3
 = 
s
0,3 
s
1,3 
s
2,3 
s
3,3 . 
(3.5) 
4. 
Mathematical Preliminaries 
All  bytes  in  the  AES  algorithm  are  interpreted  as  finite  field  elements  using  the  notation  
introduced  in  Sec.  3.2.   Finite  field  elements  can  be  added  and  multiplied,  but  these  operations  
are  different  from  those  used  for  numbers.  The  following  subsections  introduce  the  basic  
mathematical concepts needed for Sec. 5. 
4.1 
Addition 
The  addition  of  two  elements  in  a  finite  field  is  achieved  by  “adding”  the  coefficients  for  the  
corresponding powers in the polynomials for the two elements.  The addition is performed with 
the XOR operation (denoted by 
 ̄ 
) - i.e., modulo 2 - so that 
1
 ̄
1 
= 
0
, 
1
 ̄ 
0 
= 
1
, and 
0 
 ̄ 
0 
= 
0
. 
Consequently, subtraction of polynomials is identical to addition of polynomials. 
Alternatively,  addition  of  finite  field  elements  can  be  described  as  
the  modulo  2  addition  of  
corresponding bits in the byte. For two bytes {
a
7
a
6
a
5
a
4
a
3
a
2
a
1
a
0
} and {
b
7
b
6
b
5
b
4
b
3
b
2
b
1
b
0
}, the sum is 
{
c
7
c
6
c
5
c
4
c
3
c
2
c
1
c
0
}, where each 
c
i
 = 
a
i 
 ̄ 
b
i
 (i.e., 
c
7 
= a
7 
 ̄ 
b
7
, c
6 
= a
6 
 ̄ 
b
6
, ...c
0 
= a
0 
 ̄ 
b
0
)
. 
For example, the following expressions are equivalent to one another: 
6
4
2 
7 
7
6
4
2
(
x
+ 
x 
+ 
x 
+ 
x 
+
1) 
+  (
x
+ 
x 
+
1) 
= 
x 
+ 
x 
+ 
x 
+ 
x 
(polynomial notation); 
{
01010111
} 
 ̄
 {
10000011
} = {
11010100
} 
(binary notation); 
{
57
} 
 ̄
 {
83
} = {
d4
} 
(hexadecimal notation). 
4.2 
Multiplication 
In  the  polynomial  representation,  multiplication  in  GF(2
8
)  (denoted  by  
•
)  corresponds  with  the  
multiplication of polynomials modulo an 
irreducible polynomial 
of degree 8.  A polynomial is 
irreducible  if  its  only  divisors  are  one  and  itself.  
For  the  AES  algorithm,  this  irreducible 
polynomial is 
8
4
3
m
(
x
) 
= 
x 
+ 
x 
+ 
x 
+ 
x 
+
1
, 
(4.1) 
10
or {0
1}
{
1b
} in hexadecimal notation. 
For example, {
57
} 
•
 {
83
} = {
c1
}, because 
6
4
2 
7 
13
11
9
8
7
(
x 
+ 
x 
+ 
x 
+ 
x 
+
1)  (
x 
+ 
x 
+
1) 
= 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
7
5
3
2
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
6
4
2
x 
+ 
x 
+ 
x 
+ 
x 
+
1 
13
11
9 
8 
6 
5 
4 
3
= 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+
1 
and 
13
11
9
8
6
5
4
3 
8
4
3
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+ 
x 
+
1 
modulo
 ( 
x 
+ 
x 
+ 
x 
+ 
x 
+
1
) 
= 
x
7 
+ 
x 
6 
+
1 . 
The modular reduction by 
m
(
x
) ensures that the result will be a binary polynomial of degree less 
than 8, and thus can be represented by a byte.  Unlike addition, there is no simple operation at the 
byte level that corresponds to this multiplication. 
The  multiplication  defined  above  is  associative,  and  the  element  {
01
}  is  the  multiplicative 
identity.  For  any  non-zero  binary  polynomial  
b
(
x
)  of  degree  less  than  8,  the  multiplicative 
inverse of 
b
(
x
), denoted 
b
-1
(
x
), can be found as follows: the extended Euclidean algorithm [7] is 
used to compute polynomials 
a
(
x
) and 
c
(
x
) such that 
b
(
x
)
a
(
x
) 
+ 
m
(
x
)
c
(
x
) 
= 
1
. 
(4.2) 
Hence, 
a
(
x
) 
• 
b
(
x
) mod 
m
(
x
) 
= 
1
, which means 
-
b 
1
(
x
) 
= 
a
(
x
) mod 
m
(
x
) 
. 
(4.3) 
Moreover, for any 
a
(
x
), 
b
(
x
) and 
c
(
x
) in the field, it holds that 
a
(
x
) 
• 
(
b
(
x
) 
+ 
c
(
x
)) 
= 
a
(
x
) 
• 
b
(
x
) 
+ 
a
(
x
) 
• 
c
(
x
)
. 
It  follows  that  the  set  of  256  possible  byte  values,  with  XOR  used  as  addition  and  the  
multiplication defined as above, has the structure of the finite field GF(2
8
). 
4.2.1 
Multiplication by 
x 
Multiplying the binary polynomial defined in equation (3.1) with the polynomial 
x
 results in 
8
7 
6 
5
4 
3
2
b
7 
x 
+ 
b
6 
x 
+ 
b
5 
x 
+ 
b
4 
x 
+ 
b
3 
x 
+ 
b
2 
x 
+ 
b
1 
x 
+ 
b
0 
x 
. 
(4.4) 
The result 
x 
• 
b
(
x
) 
is obtained by reducing the above result modulo 
m
(
x
), as defined in equation 
(4.1).  If 
b
7
 = 0, the result is already in reduced form. If 
b
7
 = 1, the reduction is accomplished by 
subtracting  (i.e.,  XORing)  the  polynomial  
m
(
x
).    It  follows  that  multiplication  by  
x
  (i.e.,  
{
00000010
}  or  {
02
})  can  be  implemented  at  the  byte  level  as  a  left  shift  and  a  subsequent  
conditional  bitwise  XOR  with  {
1b
}.    This  operation  on  bytes  is  denoted  by  
xtime()
. 
Multiplication by higher powers of 
x
 can be implemented by repeated application of 
xtime()
. 
By adding intermediate results, multiplication by any constant can be implemented
facebooktwittergoogle_plusredditpinteresttumblr


